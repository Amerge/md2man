.TH md2man \- markdown to manpage
.PP
md2man is a Ruby library and a set of command\-line programs that convert
Markdown
\[la]http://daringfireball.net/projects/markdown/\[ra] into UNIX manual pages (both roff
\[la]http://troff.org\[ra] and HTML) using Redcarpet
\[la]https://github.com/vmg/redcarpet\[ra]\&.
.RS
.IP \(bu 2
Manuals: 
\[la]https://sunaku.github.io/md2man/man\[ra]
.IP \(bu 2
Sources: 
\[la]https://github.com/sunaku/md2man\[ra]
.IP \(bu 2
Support: 
\[la]https://github.com/sunaku/md2man/issues\[ra]
.IP \(bu 2
Package: 
\[la]https://rubygems.org/gems/md2man\[ra]
.RE
.SH Features
.RS
.IP \(bu 2
Formats indented, tagged, and normal paragraphs: described in 
.BR md2man (5).
.IP \(bu 2
Translates all HTML4 and XHTML1 entities into native roff
\[la]http://troff.org\[ra] equivalents.
.IP \(bu 2
Supports markdown extensions such as PHP Markdown Extra tables
\[la]http://michelf.com/projects/php-markdown/extra/#table\[ra]\&.
.IP \(bu 2
Usable from the command line as a filter in a UNIX command pipeline.
.RE
.SS Demonstration
.PP
Try converting this example Markdown file
\[la]https://raw.github.com/sunaku/md2man/master/EXAMPLE.markdown\[ra] into a UNIX manual page:
.PP
.RS
.nf
md2man\-roff EXAMPLE.markdown > EXAMPLE.1
man \-l EXAMPLE.1
.fi
.RE
.PP
[Obligatory screenshot of 
.BR md2man (1) 
in action!](EXAMPLE.png)
.PP
Also try converting that example Markdown file
\[la]https://raw.github.com/sunaku/md2man/master/EXAMPLE.markdown\[ra] into a web page:
.PP
.RS
.nf
md2man\-html EXAMPLE.markdown > EXAMPLE.html
open EXAMPLE.html
.fi
.RE
.SH Installation
.PP
.RS
.nf
gem install md2man
.fi
.RE
.SS Development
.PP
.RS
.nf
git clone https://github.com/sunaku/md2man
cd md2man
bundle install
bundle exec rake \-\-tasks        # packaging tasks
bundle exec md2man\-roff \-\-help  # run it directly
bundle exec md2man\-html \-\-help  # run it directly
.fi
.RE
.SH Usage
.SS For roff
\[la]http://troff.org\[ra] output
.SS At the command line
.PP
See 
.BR md2man-roff (1) 
manual:
.PP
.RS
.nf
md2man\-roff \-\-help
.fi
.RE
.SS Inside a Ruby script
.PP
Use the default renderer:
.PP
.RS
.nf
require 'md2man/roff/engine'
your_roff_output = Md2Man::Roff::ENGINE.render(your_markdown_input)
.fi
.RE
.PP
Build your own renderer:
.PP
.RS
.nf
require 'md2man/roff/engine'
engine = Redcarpet::Markdown.new(Md2Man::Roff::Engine, your_options_hash)
your_roff_output = engine.render(your_markdown_input)
.fi
.RE
.PP
Define your own renderer:
.PP
.RS
.nf
require 'md2man/roff/engine'
class YourManpageRenderer < Md2Man::Roff::Engine
  # ... your stuff here ...
end
engine = Redcarpet::Markdown.new(YourManpageRenderer, your_options_hash)
your_roff_output = engine.render(your_markdown_input)
.fi
.RE
.PP
Mix\-in your own renderer:
.PP
.RS
.nf
require 'md2man/roff'
class YourManpageRenderer < Redcarpet::Render::Base
  include Md2Man::Roff
  # ... your stuff here ...
end
engine = Redcarpet::Markdown.new(YourManpageRenderer, your_options_hash)
your_roff_output = engine.render(your_markdown_input)
.fi
.RE
.SS For HTML output
.SS At the command line
.PP
See 
.BR md2man-html (1) 
manual:
.PP
.RS
.nf
md2man\-html \-\-help
.fi
.RE
.SS Inside a Ruby script
.PP
Use the default renderer:
.PP
.RS
.nf
require 'md2man/html/engine'
your_html_output = Md2Man::HTML::ENGINE.render(your_markdown_input)
.fi
.RE
.PP
Build your own renderer:
.PP
.RS
.nf
require 'md2man/html/engine'
engine = Redcarpet::Markdown.new(Md2Man::HTML::Engine, your_options_hash)
your_html_output = engine.render(your_markdown_input)
.fi
.RE
.PP
Define your own renderer:
.PP
.RS
.nf
require 'md2man/html/engine'
class YourManpageRenderer < Md2Man::HTML::Engine
  # ... your stuff here ...
end
engine = Redcarpet::Markdown.new(YourManpageRenderer, your_options_hash)
your_html_output = engine.render(your_markdown_input)
.fi
.RE
.PP
Mix\-in your own renderer:
.PP
.RS
.nf
require 'md2man/html'
class YourManpageRenderer < Redcarpet::Render::Base
  include Md2Man::HTML
  # ... your stuff here ...
end
engine = Redcarpet::Markdown.new(YourManpageRenderer, your_options_hash)
your_html_output = engine.render(your_markdown_input)
.fi
.RE
.SS Building man pages
.SS At the command line
.PP
See 
.BR md2man-rake (1) 
manual:
.PP
.RS
.nf
md2man\-rake \-\-help
.fi
.RE
.SS Inside a Ruby script
.PP
Add this snippet to your gemspec file:
.PP
.RS
.nf
s.files += Dir['man/man?/*.?']            # UNIX man pages
s.files += Dir['man/**/*.{html,css,js}']  # HTML man pages
s.add_development_dependency 'md2man', '~> 5.0'
.fi
.RE
.PP
Add this line to your Rakefile:
.PP
.RS
.nf
require 'md2man/rakefile'
.fi
.RE
.PP
You now have a \fB\fCrake md2man\fR task that builds manual pages from Markdown files
(with ".markdown", ".mkd", or ".md" extension) inside \fB\fCman/man*/\fR directories.
There are also sub\-tasks to build manual pages individually as roff
\[la]http://troff.org\[ra] or HTML.
.PP
If you're using Bundler, this task also hooks into Bundler's gem packaging
tasks and ensures that your manual pages are built for packaging into a gem:
.PP
.RS
.nf
bundle exec rake build
gem spec pkg/*.gem | fgrep man/
.fi
.RE
.SH License
.PP
Released under the ISC license.  See the LICENSE file for details.